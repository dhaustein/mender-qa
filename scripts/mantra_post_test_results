#!/bin/sh

set -e
set -x

usage() {
  echo "Usage:"
  echo "  $0 --ensure <project-id> <build-name> <xml-file>"
  echo "  $0          <project-id> <build-name> <xml-file>"
  exit 1
}

[ "$#" -lt 3 ] && usage

ensure=0
if [ "$1" = "--ensure" ]; then
    ensure=1
    shift
fi

project_id=$1       # numeric project id
build_name=$2       # human-readable name (nightly-YYYY-MM-DD or pullreq-â€¦)
results_file=$3     # JUnit XML to upload

API="https://qastatus.mender.io/api/ci/projects/${project_id}"
AUTH="-u ${MANTRA_USERNAME}:${MANTRA_PASSWORD}"

if [ "$ensure" -eq 1 ]; then
    # Try to find an existing build with that name
    build_id=$(curl -sSf $AUTH "${API}/builds?name=${build_name}&limit=1" |
               jq -r '.[0].id // empty')

    if [ -z "$build_id" ]; then
        # Not found; attempt to create (ignore errors if a parallel shard wins)
        build_id=$(curl -sSf -H "Content-Type: application/json" $AUTH \
                   -d "{\"name\":\"${build_name}\"}" \
                   "${API}/builds" 2>/dev/null |
                   jq -r .id || true)

        # If we lost the race, request again to get the id that now exists
        [ -z "$build_id" ] && build_id=$(curl -sSf $AUTH \
             "${API}/builds?name=${build_name}&limit=1" |
             jq -r '.[0].id')
    fi
else
    # Previous behaviour: always create a fresh build
    build_id=$(curl -sSf -H "Content-Type: application/json" $AUTH \
               -d "{\"name\":\"${build_name}\"}" \
               "${API}/builds" | jq -r .id)
fi

[ -z "$build_id" ] && { echo "Could not obtain build id"; exit 1; }

curl -fsS $AUTH \
     -H "Content-Type: application/xml" \
     --data-binary @"${results_file}" \
     "${API}/builds/${build_id}/results"
