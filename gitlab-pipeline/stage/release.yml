#
# Release jobs are based on a common template and come in two flavors:
# - automatic: we use "dependencies" to make sure all previous stages completed
# - and manual: we use "needs" to give the release coordinator the control, for example
#   to publish artifacts in order to early start manual tests or to do it despite errors
#   in previous stages. With great power comes great responsibility.
#

.template_release_board_artifacts:
  tags:
    - mender-qa-worker-generic-light
  # Jobs including this template must define PUBLISH_BOARD_NAME and set up dependencies
  stage: release
  image: debian:12
  before_script:
    # Install dependencies
    - apt update && apt install -yyq awscli git wget python3 python3-pip xz-utils
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip install --break-system-packages -r requirements.txt
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.xz stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - xz -d /tmp/workspace.tar.xz
    - tar -xf /tmp/workspace.tar
    - mv /tmp/stage-artifacts .
  script:
    # Publish boards artifacts and sdimg (when not qemu board).
    - client_version=$($WORKSPACE/integration/extra/release_tool.py --version-of mender --in-integration-version $INTEGRATION_REV)
    - aws s3 cp stage-artifacts/${PUBLISH_BOARD_NAME}_release_1_${client_version}.mender
        s3://mender/${client_version}/${PUBLISH_BOARD_NAME}/${PUBLISH_BOARD_NAME}_release_1_${client_version}.mender
    - aws s3api put-object-acl --acl public-read --bucket mender
        --key ${client_version}/${PUBLISH_BOARD_NAME}/${PUBLISH_BOARD_NAME}_release_1_${client_version}.mender
    - if ! echo $PUBLISH_BOARD_NAME | grep -q qemu; then
    -   aws s3 cp stage-artifacts/mender-${PUBLISH_BOARD_NAME}_${client_version}.sdimg.gz
          s3://mender/${client_version}/${PUBLISH_BOARD_NAME}/mender-${PUBLISH_BOARD_NAME}_${client_version}.sdimg.gz;
    -   aws s3api put-object-acl --acl public-read --bucket mender
          --key ${client_version}/${PUBLISH_BOARD_NAME}/mender-${PUBLISH_BOARD_NAME}_${client_version}.sdimg.gz
    - fi

release:testing-boards:beagleboneblack:manual:
  variables:
    PUBLISH_BOARD_NAME: beagleboneblack
  needs:
    - init:workspace
    - build:acceptance:beagleboneblack
  when: manual
  only:
    variables:
      - $BUILD_BEAGLEBONEBLACK == "true"
  extends: .template_release_board_artifacts

release:testing-boards:beagleboneblack:automatic:
  variables:
    PUBLISH_BOARD_NAME: beagleboneblack
  dependencies:
    - init:workspace
    - build:acceptance:beagleboneblack
    - trigger:integration-tests
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true" && $BUILD_BEAGLEBONEBLACK == "true"
  extends: .template_release_board_artifacts

.publish_helper_functions: &publish_helper_functions |
  # Bash function to check if the string is a final tag
  function is_final_tag () {
    local -r version="$1"
    [[ "${version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]
  }
  # Bash function to check if the string is a build tag
  function is_build_tag () {
    local -r version="$1"
    [[ "${version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-build[0-9]+$ ]]
  }
  # Bash function to check if the target binary already exists
  function is_published () {
    local -r bucket="$1"
    local -r path="$2"
    aws s3api head-object --bucket "${bucket}" --key "${path}" >/dev/null 2>&1
  }

.template_release_mender-monitor:
  tags:
    - mender-qa-worker-generic-light
  stage: release
  image: debian:12
  variables:
    S3_BUCKET_NAME: "mender-binaries"
    S3_BUCKET_PATH: "mender-monitor/yocto"
  before_script:
    # Install dependencies
    - apt update && apt install -yyq awscli git wget python3 python3-pip xz-utils
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip install --break-system-packages -r requirements.txt
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.xz stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - xz -d /tmp/workspace.tar.xz
    - tar -xf /tmp/workspace.tar
    - mv /tmp/stage-artifacts .
  script:
    - mender_monitor_version=$($WORKSPACE/integration/extra/release_tool.py --version-of monitor-client --in-integration-version $INTEGRATION_REV)
    - echo "=== mender-monitor $mender_monitor_version ==="
    - echo "Publishing $mender_monitor_version version to s3://$S3_BUCKET_NAME/$S3_BUCKET_PATH/$mender_monitor_version/"
    - aws s3 cp stage-artifacts/mender-monitor-*.tar.gz s3://$S3_BUCKET_NAME/$S3_BUCKET_PATH/$mender_monitor_version/

release:mender-monitor:manual:
  needs:
    - init:workspace
    - build:mender-monitor:package
  when: manual
  extends: .template_release_mender-monitor

release:mender-monitor:automatic:
  dependencies:
    - init:workspace
    - build:mender-monitor:package
    - trigger:integration-tests
  only:
    variables:
      - $PUBLISH_RELEASE_AUTOMATIC == "true"
  extends: .template_release_mender-monitor

.template_release_docker_images:client-only:
  tags:
    - mender-qa-worker-generic-light
  stage: release
  image: docker
  services:
    - docker:dind
  before_script:
    # Check correct dind setup
    - docker version
    # Install dependencies
    - apk --update add git python3 py3-pip xz
    - wget https://raw.githubusercontent.com/mendersoftware/integration/master/extra/requirements.txt
    - pip3 install --break-system-packages -r requirements.txt
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.xz /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - xz -d /tmp/workspace.tar.xz
    - tar -xf /tmp/workspace.tar
    # Login for private repos
    - docker login -u menderbuildsystem -p ${DOCKER_HUB_PASSWORD}
    - docker login -u ntadm_menderci -p ${REGISTRY_MENDER_IO_PASSWORD} registry.mender.io
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    # Load, tag and push mender-client-* images
    # Historical note,
    # The version here used to be determined by the release_tool, which could distinguish between
    # git repo version and container image version. Today this is kind of messy, as we moved out
    # the backend to a separate repo but we haven't done deep changes in the release process for
    # the rest, and "--version-of" option gives bogus results.
    # TLDR; hardcode to mender-${INTEGRATION_REV} version for the Virtual Devices images
    - |
      version=mender-${INTEGRATION_REV}
      images="mender-client-docker mender-client-docker-addons mender-client-qemu mender-client-qemu-rofs"
      for image in $images; do
          docker pull ${GITLAB_REGISTRY_PREFIX}-${image}
          tagged_image=docker.io/mendersoftware/${image}:${version}
          docker tag ${GITLAB_REGISTRY_PREFIX}-${image} ${tagged_image}
          docker push ${tagged_image}
      done

      enterprise_images="mender-monitor-qemu-commercial mender-qemu-rofs-commercial"
      for image in $enterprise_images; do
          docker pull ${GITLAB_REGISTRY_PREFIX}-${image}
          tagged_image=registry.mender.io/mendersoftware/${image}:${version}
          docker tag ${GITLAB_REGISTRY_PREFIX}-${image} ${tagged_image}
          docker push ${tagged_image}
      done

release:virtual-client:manual:
  needs:
    - init:workspace
    - build:client:qemu
    - build:client:docker
  rules:
    - if: $BUILD_CLIENT == "true"
      when: manual
  extends: .template_release_docker_images:client-only

# This job allows mender repo to publish the related Docker client images on
# merges to master or release branches.
release:virtual-client:automatic:
  dependencies:
    - init:workspace
    - build:client:qemu
    - build:client:docker
    - trigger:integration-tests
  rules:
    - if: $PUBLISH_DOCKER_CLIENT_IMAGES == "true" && $BUILD_CLIENT == "true"
  extends: .template_release_docker_images:client-only
